import commonjs from "@rollup/plugin-commonjs"
import typescript from "@rollup/plugin-typescript"
import { defineConfig } from "rollup"
import { cleandir } from "rollup-plugin-cleandir"
import dts from "rollup-plugin-dts"
import generateDeclarations from "rollup-plugin-generate-declarations"
import { nodeResolve } from "@rollup/plugin-node-resolve"
import json from "@rollup/plugin-json"
import * as glob from "glob"

export default () => {
  const outDir = "./out"
  const inputFiles = glob.sync("<input_key>", { ignore: [outDir, "**/*/*.d.ts"] })
  return defineConfig({
    input: inputFiles,
    treeshake: false,
    output: {
      dir: outDir,
      format: "cjs",
      sourcemap: true,
      preserveModules: true, // Keep files separates instead of one bundled file
    },
    plugins: [
      cleandir(outDir),
      // commonjs({ extensions: [".js", ".ts"] }),
      // dts({
      //   tsconfig: "./tsconfig.json",
      // }),
      // nodeResolve(),
      json(),
      typescript({
        tsconfig: "./tsconfig.json",
        checkJs: true,
        declaration: true,
        declarationDir: outDir,
        sourceMap: true,
        // useTsconfigDeclarationDir: true,
        // verbosity: 3,
        // clean: true,
      }),
      // generateDeclarations(),
    ],
  })
}
