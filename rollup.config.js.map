{"version":3,"file":"rollup.config.js","sourceRoot":"","sources":["rollup.config.ts"],"names":[],"mappings":"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","sourcesContent":["import typescript from \"@rollup/plugin-typescript\"\nimport typescript2 from \"rollup-plugin-typescript2\"\nimport { defineConfig } from \"rollup\"\nimport * as glob from \"glob\"\nimport { cleandir } from \"rollup-plugin-cleandir\"\nimport typescriptCompiler from \"typescript\"\nimport commonjs from \"@rollup/plugin-commonjs\"\n\n// import { cleandir } from \"rollup-plugin-cleandir\"\nimport path from \"path\"\n\nconst packageMap = [\n  {\n    package: \"builder-util-runtime\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  {\n    package: \"builder-util\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  {\n    package: \"electron-publish\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  {\n    package: \"app-builder-lib\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  {\n    package: \"dmg-builder\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  {\n    package: \"electron-updater\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  {\n    package: \"electron-builder\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  {\n    package: \"electron-builder-squirrel-windows\",\n    entry: \"src/**/*.ts\",\n    main: \"src/index.ts\",\n  },\n  // {\n  //   package: \"electron-forge-maker-appimage\",\n  //   entry: \"main.js\",\n  // },\n  // {\n  //   package: \"electron-forge-maker-snap\",\n  //   entry: \"main.js\",\n  // },\n  // {\n  //   package: \"electron-forge-maker-nsis\",\n  //   entry: \"main.js\",\n  // },\n  // {\n  //   package: \"electron-forge-maker-nsis-web\",\n  //   entry: \"main.js\",\n  // },\n]\n\nexport default () => {\n  const outDir = \"out\"\nreturn packageMap.map(pkg => {\n  const dir = path.resolve(process.cwd(), `packages/${pkg.package}/${outDir}`)\n  const input = glob.sync(`packages/${pkg.package}/${pkg.entry}`, { ignore: [dir, \"**/*/*.d.ts\"] })\n  return defineConfig({\n    input,\n    treeshake: false,\n    output: {\n      dir: dir,\n      format: \"cjs\",\n      sourcemap: true,\n      preserveModules: true, // Keep files separates instead of one bundled file\n    },\n    watch: {\n      // include: rootDirs,\n      // exclude: [dir, \"packages/*/out\"],\n    },\n    external: id => !/^[./]/.test(id),\n    plugins: [\n            {\n        name: \"watch-external\",\n        buildStart() {\n          additionalWatchFiles.forEach(file => {\n            this.addWatchFile(file)\n          })\n        },\n      },\n      cleandir(dir),\n      typescript2({\n        tsconfig: `packages/${pkg.package}/tsconfig.json`,\n        clean: true,\n        check: true,\n        abortOnError: true,\n        tsconfigOverride: {\n          compilerOptions: {\n            typeRoots,\n          //   rootDirs,\n          },\n          // references: packageMap.map(pkg => ({\n          //   path: `../${pkg.package}`,\n          // })),\n        },\n      }),\n    ],\n  })\n})\n}\n\nconst additionalWatchFiles = glob.sync([\"**/tsconfig.json\", \"**/package.json\", \"**/*.d.ts\"], { ignore: [\"node_modules\", \"docker-node-modules\"] })\nconst typeRoots = glob.sync([\"./node_modules/@types\", \"packages/*/node_modules/@types\", \"**/typings\"])\nconst globPath = (pkg: any) => `packages/${pkg.package}/${pkg.entry}`\nconst files = packageMap\n  .map(pkg => {\n    const input = glob.sync(\n      globPath(pkg),\n      //\n      { ignore: [\"**/*.d.ts\"] }\n    )\n    return input\n  })\n  .flat()\n\nconst input = files.reduce((acc, curr) => {\n  const out = curr.replace(`${path.sep}src${path.sep}`, `${path.sep}out${path.sep}`).replace(\".ts\", \"\")\n  return {\n    ...acc,\n    [out]: curr,\n  }\n}, {})\n\nconst rootDirs = packageMap.map(pkg => {\n  return `packages/${pkg.package}/src`\n})\n\n// export default () => {\n//   console.log(typeRoots)\n//   return defineConfig({\n//     input,\n//     treeshake: false,\n//     output: {\n//       // dir: dir,\n//       dir: \"out\",\n//       format: \"cjs\",\n//       sourcemap: true,\n//       preserveModules: true, // Keep files separates instead of one bundled file\n//     },\n//     // watch: {\n//     //   // exclude: [dir],\n//     //   include: [\n//     //     \"./tsconfig.json\",\n//     //     \"**/tsconfig.json\",\n//     //     //\n//     //     \"./package.json\",\n//     //     \"**/package.json\",\n//     //   ],\n//     // },\n//     // external: id => !/^[./]/.test(id), // || packageMap.findIndex(pkg => id.includes(pkg.package)) === -1,\n//     // external(source, importer, isResolved) {\n//     //   // console.log({ source, isResolved, importer })\n//     //   return !/^[./]/.test(source) // || source.includes(\"/src/\")\n//     // },\n//     plugins: [\n//       {\n//         name: \"watch-external\",\n//         buildStart() {\n//           additionalWatchFiles.forEach(file => {\n//             this.addWatchFile(file)\n//           })\n//         },\n//       },\n//       // cleandir(dir),\n//       // commonjs(),\n//       // typescript({\n//       //   tsconfig: `./tsconfig.json`,\n//       //   include: packageMap.map(pkg => globPath(pkg)),\n//       //   compilerOptions: {\n//       //     typeRoots,\n//       //     rootDirs,\n//       //     // target: \"esnext\",\n//       //     // module: \"esnext\",\n//       //     // esModuleInterop: true,\n//       //     // // esModuleInterop: false,\n//       //     // forceConsistentCasingInFileNames: true,\n//       //     // moduleResolution: \"node\",\n//       //     // skipLibCheck: true,\n//       //     // strict: true,\n\n//       //     // allowSyntheticDefaultImports: true,\n//       //     // experimentalDecorators: true,\n//       //     // noEmitOnError: true,\n//       //     // declaration: false\n//       //   },\n//       // }),\n//       // commonjs({\n//       //   // exclude: /^[./]/,\n//       // }),\n//       typescript2({\n//         tsconfig: `./tsconfig.json`,\n//         include: packageMap.map(pkg => globPath(pkg)),\n//         exclude: ['rollup.config.ts'],\n//         clean: true,\n//         check: true,\n//         abortOnError: true,\n//         tsconfigOverride: {\n//           compilerOptions: {\n//             typeRoots,\n//             rootDirs,\n//           },\n//           references: packageMap.map(pkg => ({\n//             path: `../${pkg.package}`,\n//           })),\n//         },\n//       }),\n//       // commonjs({\n//       //   // exclude: /^[./]/,\n//       // }),\n//     ],\n//   })\n// }\n"]}